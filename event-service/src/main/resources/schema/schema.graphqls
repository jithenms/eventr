type Query {
    student(studentId: String): Student
    teacher(teacherId: String): Teacher
    allStudents: [Student]
    allTeachers: [Teacher]
    allSchools: [School]
    schoolEvents(schoolId: String!): [Event]
    studentParticipation(studentId: String!): [Participation]
    eventParticipation(eventId: String!): [Participation]
    teacherEvents(teacherId: String!): [Event]
    event(eventId: String!): Event
    schoolPrizes(schoolId: String!): [Prize]
    studentPrizes(studentId: String!): [Prize]
    leaderboard(schoolId: String!, quarter: Int!): [Student]
}

type Mutation {
    createSchool(createSchoolInput: CreateSchoolInput!): School
    createTeacher(createTeacherInput: CreateTeacherInput!): Teacher
    createStudent(createStudentInput: CreateStudentInput!): Student
    createEvent(createEventInput: CreateEventInput!): Event
    joinEvent(eventId: String, studentId: String): Event
    acceptEventRequest(eventId: String!, studentId: String!): Event
    leaveEvent(eventId: String!, studentId: String!): Event
    createPrize(createPrizeInput: CreatePrizeInput!): Prize
    redeemPrize(prizeId: String!, studentId: String!): Prize
}

input CreateSchoolInput {
    schoolName: String
}

input CreateTeacherInput {
    schoolCode: Int
    firstName: String
    lastName: String
    email: String
    password: String
}

input CreateStudentInput {
    schoolCode: Int
    firstName: String
    lastName: String
    email: String
    password: String
    grade: Int
}

input CreateEventInput {
    schoolId: String
    teacherId: String
    title: String
    description: String
    date: String
    time: String
    points: Int
    quarter: Int
}

input CreatePrizeInput {
    schoolId: String
    name: String
    description: String
    pointsRequired: Int
}

type School {
    id: String
    name: String
    code: Int
    createdAt: String
    updatedAt: String
}

type Participation {
    id: String
    student: Student
    event: Event
    status: ParticipationStatus
    createdAt: String
    updatedAt: String
}

type Teacher {
    id: String
    school: School
    firstName: String
    lastName: String
    email: String
    createdAt: String
    updatedAt: String
}

type Student {
    id: String
    school: School
    firstName: String
    lastName: String
    email: String
    grade: Int
    points: Int
    q1points: Int
    q2points: Int
    q3points: Int
    q4points: Int
    createdAt: String
    updatedAt: String
}


type Event {
    id: String
    teacher: Teacher
    school: School
    title: String
    description: String
    points: Int
    time: String
    date: String
    quarter: Int
    createdAt: String
    updatedAt: String
}

type Prize {
    id: String
    school: School
    name: String
    description: String
    pointsRequired: Int
}

enum UserRole {
    STUDENT
    TEACHER
}

enum ParticipationStatus {
    JOINED
    ACCEPTED
}